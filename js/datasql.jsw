/*********
 .jsw file
 *********

 Backend .jsw files contain functions that run on the server side but can be called from page code and frontend files.
 Use backend functions to keep code private and hidden from a user's browser. More info:

 https://support.wix.com/en/article/velo-web-modules-calling-backend-code-from-the-frontend

**********/

import { sql } from '@velo/wix-data-sql-backend';
const moduleDataSql = 'backend/courses/datasql.jsw/';

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// log errors to errorLog collection
export async function logErr(moduleName, err) {
    const moduleNameErr = moduleDataSql + 'logErr()';
    try {     
        let sqlt = `INSERT INTO errorLog(module, errText) VALUES ('${moduleName}', '${err}')`;
        console.log(sqlt);
        await sql(sqlt);
        console.log('Error in module ' + moduleName + ':' + err);
    } catch (err) {
        console.log('Error in module ' + moduleNameErr + ':' + err);
        logErr(moduleNameErr, err);
    }
} // END logErr()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

// returns formatted date for use in working with collections, APIs, ...
export function getDateF(days) {
  let today = new Date();
  let future = new Date();
  future.setDate(today.getDate() + days);
  let futureF = future.toISOString().slice(0,10);
  return futureF;
} // END getDateF()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export async function getSubCoursesData(courseID, email_prefix, priznak_VS) {

const moduleName = moduleDataSql + 'getSubCoursesData()';

let baseSql = "SELECT * from subCourses WHERE courseID = " + "'" + courseID + "'";

let sqlt;
 
try {
    if (email_prefix == 'ALL') {
        sqlt = baseSql + " AND priznak = " + "'" + priznak_VS + "'" + " ORDER BY prijmeni";
    } else {
        if (email_prefix.indexOf('@') > 0) {
            sqlt = baseSql + " AND email = " + "'" + email_prefix + "'";
        }  else sqlt = baseSql + " AND lastOrdNum = '" + email_prefix + priznak_VS + "'"
    }
    console.log(sqlt);
    const results = await sql(sqlt);
    console.log(results.payload.data.rows);
    return results.payload.data.rows;
} catch (err) {
    logErr(moduleName, err)
    return err;
}
    
} // END getSubCoursesData()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export async function updLastOrdNum(courseID, docNum, email) {

    const moduleName = moduleDataSql + 'updLastOrdNum()';

    try {
        let sqlt = `UPDATE subCourses SET lastOrdNum = '${docNum}' where courseID = '${courseID}' and email = '${email}'`;
        console.log(sqlt);
        await sql(sqlt);
    } catch (err) {
        logErr(moduleName, err);
    }
} // END updLastOrdNum()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export async function updBankMovements(idPohybu_stateFrom, stateTo) {
    
    const moduleName = moduleDataSql + 'updBankMovements()';

    
    let baseSql = `UPDATE eshop_bankTransactions SET stav = '${stateTo}' where`;
    let sqlt, colName, string;

    try {
        // if input is idPohybu - update according the column idPohybu, else update according the stav column
        if (isNaN(idPohybu_stateFrom)) {
            colName = 'stav';
            string = "'";
        } else {
            colName = 'idPohybu';
            string = "";
        }
        sqlt = `${baseSql} ${colName} = ${string}${idPohybu_stateFrom}${string}`;
        console.log(sqlt);
        await sql(sqlt);
    } catch (err) {
        logErr(moduleName, err);
    }
}

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

/*
export async function insBankTransactions(idPohybu, datum, objem, mena, protiucet, nazevProtiuctu, kodBanky, nazevBanky, ks, vs, ss,
uzivatelskaIdentifikace, zpravaProPrijemce, typ, provedl, upresneni, komentar, bic, idPokynu) {
*/
export async function insBankTransactions(idPohybu, datum, objem, mena, nazevProtiuctu, vs, zpravaProPrijemce, stav) {

    const moduleName = moduleDataSql + 'insBankTransactions()';

    try {
        /*
        let sqlt = `
        INSERT INTO eshop_bankTransactions(idPohybu, datum, objem, mena, protiucet, nazevProtiuctu, kodBanky, nazevBanky, ks, vs, ss,
        uzivatelskaIdentifikace, zpravaProPrijemce, typ, provedl, upresneni, komentar, bic, idPokyn, stav)
        VALUES (${idPohybu}, ${datum}, ${objem}, ${mena}, '${protiucet}', '${nazevProtiuctu}', ${kodBanky}, '${nazevBanky}', ${ks}, '${vs}', ${ss},
        '${uzivatelskaIdentifikace}', '${zpravaProPrijemce}', '${typ}', '${provedl}', '${upresneni}', '${komentar}', ${bic}, ${idPokynu}, '${stav}')
        `;
        */
        let sqlt = `
        INSERT INTO eshop_bankTransactions(idPohybu,     datum,     objem,     mena,      nazevProtiuctu,      vs,      zpravaProPrijemce,      stav) VALUES
                                        (${idPohybu}, '${datum}', ${objem}, '${mena}', '${nazevProtiuctu}', '${vs}', '${zpravaProPrijemce}', '${stav}')
        `;
        console.log(sqlt);
        await sql(sqlt);
    } catch (err) {
        logErr(moduleName, err);
    }
} // END insBankTransactions()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////

export async function getBankMovements(state) {

    const moduleName = moduleDataSql + 'getBankMovements()';
    
    try {
            // read rows with VS filled in
            let sqlt = `SELECT * from eshop_bankTransactions WHERE stav = '${state}' and vs != ''`;
            console.log(sqlt);
            const results = await sql(sqlt);
            console.log(results.payload.data.rows);
            return results.payload.data.rows;
        } catch (err) {
        logErr(moduleName, err)
        return err;
    }
} // END getBankMovements()

/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////